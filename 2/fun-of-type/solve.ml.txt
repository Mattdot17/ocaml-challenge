(*_________________________*)


(* f1 : int -> bool *)                 
let f1 x = x mod 2 = 0;;


(* f2 : bool -> int *)    
let f2 = function
    true -> 1
  | false -> 0
;;


(* f3 : int -> (int * bool) *)    
let f3 x = match x with
    1 -> (1,true)
  | _ -> (0,false);;


(* f4 : (int * bool) -> int *)    
let f4 (x,y) = match (x,y) with
    (1,true) -> 1;
  | _ -> 0;;


(* f5 : int -> (int -> int) *) 
let f5 x = fun y -> y+x;;
  

(* f6 : int -> (int -> bool) *)  
let f6 x = fun y -> if y+x > 0 then true else false;;

(* f7 : bool -> (int -> bool) *)  
let f7 = function
    true -> fun x -> x > 0
  | false -> fun x -> x > 0;;

(* f8 : bool -> (bool -> int) *)  
let f8 y = fun x -> if x && y then 1 else 0;;
  

(* f9 : bool -> (int -> int) *)  
let f9 x = if x then fun y -> y + 1
  else fun y -> y - 1;;

(* f10 : (int -> int) -> int *)  
let f10 x = x 0 + 1 ;;

(* f11 : (int -> bool) -> int *) 

let f11 x = if x 1 then 1 else 0 ;;

(* f12 : (bool -> int) -> int *)  
let f12 f = f true + 1;;

(* f13 : (int -> bool) -> bool *)  
let f13 f = if f 1 then true else false;; 

(* f14 : (bool -> bool) -> int *) 
let f14 f = if f true then 1 else 0;;

(* f15 : int -> (int * int) -> int *)  
let f15 x (y,z) = x+y+z;;


(* f16 : int -> (int -> (int -> int)) *)  
let f16 x = fun y -> fun z -> x + y + z;;

(* f17 : (int -> int) -> (int -> int) *) 
let f17 f = fun x -> f (x+1) + 1;;


(* f18 : ((int -> int) -> int) -> int *)  
let f18 f = (f(fun x -> x+1) + 1);;


(* f19 : (int -> int) -> (bool -> bool) *)  
let f19 f = fun x -> x && (f 1 > 1);; 


(* f20 : (int -> bool) -> (bool -> int) *) 


let f20 f = fun x -> if x && f 0 then 1 else 0;;

  